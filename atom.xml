<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Kekedie's Blog]]></title>
  <link href="http://kekedie.github.com/atom.xml" rel="self"/>
  <link href="http://kekedie.github.com/"/>
  <updated>2013-02-27T00:11:42+09:00</updated>
  <id>http://kekedie.github.com/</id>
  <author>
    <name><![CDATA[Han Sangwon]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[zsh 사용하기]]></title>
    <link href="http://kekedie.github.com/blog/2013/02/26/using-zsh/"/>
    <updated>2013-02-26T22:56:00+09:00</updated>
    <id>http://kekedie.github.com/blog/2013/02/26/using-zsh</id>
    <content type="html"><![CDATA[<p>맥에는 <code>bash</code>말고도 몇개에 쉘이 기본으로 설치 되어 있다.<br/>
현재 사용중인 쉘을 확인하려면</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">echo</span> <span class="nv">$SHELL</span>
</span></code></pre></td></tr></table></div></figure>


<p>맥에 설치된 쉘의 종류를 확인하려면</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>cat /etc/shells
</span></code></pre></td></tr></table></div></figure>


<p>디폴트 쉘을 변경하려면 <code>chsh</code>명령어를 실행하고 터미널을 재기동 해주면 된다. <br/>
예를 들어 zsh쉘을 사용하려면</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>chsh -s /bin/zsh
</span></code></pre></td></tr></table></div></figure>


<p>Mountain Lion (10.8.2) 기준으로 기본 설치되어 있는 zsh의 버전은 <code>4.3.11</code>이다.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>/bin/zsh --version
</span><span class='line'>zsh 4.3.11 <span class="o">(</span>i386-apple-darwin12.0<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>zsh 설치하기</h3>

<p>상위 버전의 zsh 을 이용하려면 <a href="http://mxcl.github.com/homebrew/">homebrew</a>를 이용해서 간편하게 설치를 할 수 있다. (homebrew 설치는 홈페이지 참고)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># 설치가능한 zsh 버전 확인하기.</span>
</span><span class='line'>brew info zsh
</span><span class='line'><span class="c"># zsh 설치.</span>
</span><span class='line'>brew install zsh
</span></code></pre></td></tr></table></div></figure>


<p>설치 후에는 <code>/usr/local/bin/zsh</code> 로 사용가능하고 <code>chsh</code>명령어로 디폴트 쉘을 brew 로 설치한 zsh로 변경할 수 있다.
<code>chsh</code>을 사용하기 위해서는 우선 <code>/etc/shells</code>에 <code>/usr/local/bin/zsh</code>을 추가하고 <code>chsh -s</code> 를 해주면 된다.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># /usr/local/bin/zsh 를 파일 맨 마지막에 추가.</span>
</span><span class='line'>vim /etc/shells
</span><span class='line'>
</span><span class='line'>cat /etc/shells
</span><span class='line'><span class="c"># List of acceptable shells for chpass(1).</span>
</span><span class='line'><span class="c"># Ftpd will not allow users to connect who are not using</span>
</span><span class='line'><span class="c"># one of these shells.</span>
</span><span class='line'>
</span><span class='line'>/bin/bash
</span><span class='line'>/bin/csh
</span><span class='line'>/bin/ksh
</span><span class='line'>/bin/sh
</span><span class='line'>/bin/tcsh
</span><span class='line'>/bin/zsh
</span><span class='line'>/usr/local/bin/zsh
</span><span class='line'>
</span><span class='line'><span class="c"># 쉘 변경.</span>
</span><span class='line'>chsh -s /usr/local/bin/zsh
</span></code></pre></td></tr></table></div></figure>


<p>쉘 변경 후에는 터미널을 재기동하고 버전을 확인하면 끝!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>which zsh
</span><span class='line'>/usr/local/bin/zsh
</span><span class='line'>
</span><span class='line'>zsh --version
</span><span class='line'>zsh 5.0.2 <span class="o">(</span>x86_64-apple-darwin12.2.0<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Embedded Tomcat 7]]></title>
    <link href="http://kekedie.github.com/blog/2013/02/20/embedded-tomcat-7/"/>
    <updated>2013-02-20T00:36:00+09:00</updated>
    <id>http://kekedie.github.com/blog/2013/02/20/embedded-tomcat-7</id>
    <content type="html"><![CDATA[<p>예전에 wordpress블로그에 포스트한 내용 그대로 옮길려다가 <code>pom.xml</code>부분을 <code>build.gradle</code>로 바꿔 보았다.</p>

<p>Embedded Tomcat을 사용하려면 일단은 <code>gradle</code>에 디펜던시 부터 추가하고 <code>tomcat-dbcp</code>는 필수는 아니지만 웹 어플리케이션에서 <code>DataSource</code>를 <code>Context.xml</code>에 추가해서 <code>lookup</code>할 경우 필요하다.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="c1">// build.gradle</span>
</span><span class='line'><span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">testCompile</span><span class="o">(</span><span class="s1">&#39;org.apache.tomcat.embed:tomcat-embed-core:7.0.34&#39;</span><span class="o">)</span>
</span><span class='line'>    <span class="n">testCompile</span><span class="o">(</span><span class="s1">&#39;org.apache.tomcat.embed:tomcat-embed-logging-juli:7.0.34&#39;</span><span class="o">)</span>
</span><span class='line'>    <span class="n">testCompile</span><span class="o">(</span><span class="s1">&#39;org.apache.tomcat.embed:tomcat-embed-jasper:7.0.34&#39;</span><span class="o">)</span>
</span><span class='line'>    <span class="n">testCompile</span><span class="o">(</span><span class="s1">&#39;org.apache.tomcat.embed:tomcat-embed-logging-log4j:7.0.34&#39;</span><span class="o">)</span>
</span><span class='line'>    <span class="n">testCompile</span><span class="o">(</span><span class="s1">&#39;org.apache.tomcat:tomcat-dbcp:7.0.34&#39;</span><span class="o">)</span> <span class="c1">// optional</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>이클립스 플러그인은 필수.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="c1">// build.gradle</span>
</span><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;eclipse-wtp&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>사용방법은 <code>addWebapp</code>를 이용해서 웹 어플리케이션을 추가하는 방법과 <code>addContext</code>를 이용해서 서블릿, 필터, 리소스 등을 프로그래밍으로 추가하는 방법이 있다.
<code>addWebapp</code>를 이용한 테스트 코드는 대략 다음과 같다.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * project structure.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * sample-test</span>
</span><span class='line'><span class="cm"> * ├── build</span>
</span><span class='line'><span class="cm"> * │   └── embedded-tomcat</span>
</span><span class='line'><span class="cm"> * └── src</span>
</span><span class='line'><span class="cm"> *     └── main</span>
</span><span class='line'><span class="cm"> *         └── webapp</span>
</span><span class='line'><span class="cm"> *             ├── META-INF</span>
</span><span class='line'><span class="cm"> *             │   └── context.xml</span>
</span><span class='line'><span class="cm"> *             └── WEB-INF</span>
</span><span class='line'><span class="cm"> *                 └── web.xml</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">private</span> <span class="n">Tomcat</span> <span class="n">tomcat</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Before</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUpEmbeddedTomcat</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">tomcat</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Tomcat</span><span class="o">();</span>
</span><span class='line'>    <span class="n">tomcat</span><span class="o">.</span><span class="na">setBaseDir</span><span class="o">(</span><span class="s">&quot;build/embedded-tomcat&quot;</span><span class="o">);</span> <span class="c1">// gradle build directory.</span>
</span><span class='line'>    <span class="n">tomcat</span><span class="o">.</span><span class="na">setPort</span><span class="o">(</span><span class="mi">8080</span><span class="o">);</span>
</span><span class='line'>    <span class="n">tomcat</span><span class="o">.</span><span class="na">enableNaming</span><span class="o">();</span> <span class="c1">// use tomcat naming service.</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">String</span> <span class="n">docBase</span> <span class="o">=</span> <span class="s">&quot;src/main/webapp&quot;</span>
</span><span class='line'>    <span class="n">Context</span> <span class="n">ctx</span> <span class="o">=</span> <span class="n">tomcat</span><span class="o">.</span><span class="na">addWebapp</span><span class="o">(</span><span class="s">&quot;/sample-test&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="n">docBase</span><span class="o">).</span><span class="na">getAbsolutePath</span><span class="o">());</span>
</span><span class='line'>    <span class="n">File</span> <span class="n">configFile</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="n">docBase</span> <span class="o">+</span> <span class="s">&quot;/META-INF/context.xml&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">ctx</span><span class="o">.</span><span class="na">setConfigFile</span><span class="o">(</span><span class="n">configFile</span><span class="o">.</span><span class="na">toURI</span><span class="o">().</span><span class="na">toURL</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">tomcat</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testWebService</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// some test code.</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@After</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">tearDownEmbeddedTomcat</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">tomcat</span><span class="o">.</span><span class="na">stop</span><span class="o">();</span>
</span><span class='line'>    <span class="n">tomcat</span><span class="o">.</span><span class="na">destroy</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>테스트 도중에 tomcat을 리로드 하고 싶은 경우에는 <code>ctx.reload()</code>를 호출해주면 된다. (tomcat인스턴스 하나에 복수 웹 컨텍스트를 등록한 경우는 각 컨텍스트 인스턴스에 reload를 호출해야 됨. 위에 코드에서는 Context를 지역변수로 선언해서 test case메소드에서는 당연히 참조가 안된다.)</p>

<p>현재 프로젝트에서는 JUnit4에 TestRule을 확장해서 사용중이다.
아쉽게도 <code>servlet-api 3.0</code> 스펙인 <code>annotation</code>을 사용하는 경우는 작동하지 않는다. 이래저래 구글 검색을 해봐도 답이 없는거 같고.
대충 코딩한다고 치면 <code>base package</code>를 받아서 서블릿, 필터, 리스너 등을 확장한 클래스에 선언된 <code>annotation</code>을 파싱해서 <code>addContext</code>를 이용해서 프로그래밍으로 추가하면 될 것 같긴하다.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iTerm2 Solarized 테마설정]]></title>
    <link href="http://kekedie.github.com/blog/2013/02/10/iterm2-solarized/"/>
    <updated>2013-02-10T19:08:00+09:00</updated>
    <id>http://kekedie.github.com/blog/2013/02/10/iterm2-solarized</id>
    <content type="html"><![CDATA[<p>보기 좋은 떡이 먹기도 좋다고 요즘 각종 툴에 테마 설정을 이것저것 찾아 보던 중에 발견한 <strong><a href="http://ethanschoonover.com/solarized">Solarized</a></strong>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone git://github.com/altercation/solarized.git
</span><span class='line'>tree solarized/iterm2-colors-solarized 
</span><span class='line'>solarized/iterm2-colors-solarized
</span><span class='line'>├── README.md
</span><span class='line'>├── Solarized\ Dark.itermcolors
</span><span class='line'>└── Solarized\ Light.itermcolors</span></code></pre></td></tr></table></div></figure>


<p><strong><a href="git%20clone%20git://github.com/altercation/solarized.git">github</a></strong>저장소에서 <code>Solarized</code>테마를 다운로드 받고 <strong>iTerm2 > Preferences > Profiles > Colors > Load Presets&#8230; > Import&#8230;</strong> 에서 위에서 클론 받아온 파일을 임포트 해주면 끝.</p>

<p>개인적으로는 바탕화면이 어두운걸 선호해서 <code>Solarized Dark.itermcolors</code>를 임포트해서 사용중이다.
레포지토리에 보면 기타 다른 툴에서도 같은 테마를 적용할 수 있게 임포트 파일들이 준비 되어 있다. 아쉽게도 <a href="http://www.eclipse.org">Eclipse</a>는 빠졌는데 (intelliJ는 있는데&#8230;) <a href="http://eclipsecolorthemes.org">Eclipse Color Theme</a>에서 <a href="http://eclipsecolorthemes.org/?list=all&amp;q=solarized">검색</a>해보면 괜찮은 자료가 많이 올라와 있다.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello Gradle!]]></title>
    <link href="http://kekedie.github.com/blog/2013/02/07/hello-gradle/"/>
    <updated>2013-02-07T00:15:00+09:00</updated>
    <id>http://kekedie.github.com/blog/2013/02/07/hello-gradle</id>
    <content type="html"><![CDATA[<p>최근 프로젝트에서 사용중이였던 <strong>Maven</strong>을 <strong>Gradle</strong>로 이전하고 있는 중이다.
<a href="http://www.gradle.org">Gradle사이트</a>에서 제공하고 있는 <a href="http://www.gradle.org/docs/current/userguide/userguide.html">Gradle User Guide</a>를 보면서 테스트 중인데 <strong>Maven</strong>에서 프로젝트 의존성 문제로 골머리를 썪혔던 부분이 <code>settings.gradle</code>에 서브프로젝트 설정 한줄로 단번에 해결!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="c1">// 하위 디렉토리는 &#39;:&#39; 로 구분.</span>
</span><span class='line'><span class="n">include</span> <span class="s2">&quot;서브프로젝트1&quot;</span><span class="o">,</span> <span class="s2">&quot;서브프로젝트2&quot;</span><span class="o">,</span> <span class="s2">&quot;서브프로젝트3&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Gradle</strong>에서 <code>multi-project build</code> 설정은 정말 쉽다.
물론 각 서브프로젝트들도 <code>build.gradle</code>이 필요하지만 <strong>Maven</strong>에서 <code>xml</code>로 기술하던거랑은 비교할 수도 없이 간단하다.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="c1">// 서브프로젝트1에서 서브프로젝트2와 의존관계가 있을 경우.</span>
</span><span class='line'><span class="c1">// &#39;:&#39;는 루트 프로젝트 디렉토리 인듯.</span>
</span><span class='line'><span class="n">compile</span> <span class="nf">project</span><span class="o">(</span><span class="s1">&#39;:서브프로젝트2&#39;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>서브프로젝트를 테스트 하거나 빌드를 할때도 루트프로젝트를 지정하지 않아도 알아서 <code>settings.gradle</code>을 찾아서 의존관계를 해결해 준다.</p>

<p>한마디로 빌드계에 <strong>강남스타일</strong>이라 할 수 있겠다 :)</p>
]]></content>
  </entry>
  
</feed>
